(this["webpackJsonpalayna-portfolio"]=this["webpackJsonpalayna-portfolio"]||[]).push([[0],{20:function(e,t,o){},21:function(e,t,o){},22:function(e,t,o){},23:function(e,t,o){},27:function(e,t,o){},28:function(e,t,o){"use strict";o.r(t);var a=o(0),s=o(1),n=o.n(s),i=o(8),r=o.n(i),c=o(5),l=o(12),d=o(10),h=o(13),p=o(2);o(20);var m=function(){return Object(a.jsxs)("header",{className:"header",children:[Object(a.jsx)("h1",{children:"Hi, I'm Alayna."}),Object(a.jsx)("p",{children:"I'm a Senior UX Engineer at Roku creating internal design tools and prototyping TV experiences. I'm passionate about using my engineering skills and eye for design to create great user experiences."}),Object(a.jsxs)("div",{className:"linkIcons",children:[Object(a.jsx)("a",{href:"https://www.linkedin.com/in/atruttmann/","aria-label":"LinkedIn",children:Object(a.jsx)(p.e,{})}),Object(a.jsx)("a",{href:"download/Resume-Alayna-Truttmann.pdf","aria-label":"Resume",children:Object(a.jsx)(p.d,{})}),Object(a.jsx)("a",{href:"mailto:amtruttmann@gmail.com","aria-label":"Email",children:Object(a.jsx)(p.a,{})}),Object(a.jsx)("a",{href:"https://github.com/atruttmann","aria-label":"GitHub",children:Object(a.jsx)(p.c,{})})]})]})},g=(o(21),function(e){var t,o=e.project,s=e.setSelectedProject,n=void 0===s?function(){}:s,i=e.setModalOpen,r=void 0===i?function(){}:i;return Object(a.jsxs)("div",{className:"projectTile",onClick:function(e){n(o),r(!0),e.stopPropagation()},children:[Object(a.jsx)("div",{className:"projectImage",style:{backgroundImage:"url(".concat(o.coverImageSrc,")"),backgroundPosition:null!==(t=o.coverPosition)&&void 0!==t?t:"center"},alt:"Cover for ".concat(o.title)}),Object(a.jsxs)("div",{className:"projectLabel",children:[Object(a.jsx)("h2",{children:o.title}),Object(a.jsx)("p",{className:"body2",children:o.subTitle})]})]})}),u=function(e){return"".concat("","images/").concat(e,"/")},b=u("Dixma"),j={title:"Dixma",subTitle:"Figma plugin for Dixit card game",coverImageSrc:"".concat(b,"/1.png"),coverPosition:"center",passwordRequired:!1,overview:{problem:"The Design Technology team is in need of a way to connect virtually while working from home. We've found that playing games together is a great way to relax and build team spirit.",goal:"Create a Figma plugin that allows us to play the board game Dixit.",role:"I worked on a team of four Design Technologists. My primary contribution was writing the plugin code that dealt cards to players and moved submitted cards to the main game board.",dates:"August 2020",technologies:"Figma Plugin API, Typescript"},links:[{title:"Figma Plugin",url:"https://www.figma.com/community/plugin/889931101393641155/dixma"},{title:"Game Board File",url:"https://www.figma.com/community/file/889925301071649823"},{title:"Code",url:"https://github.com/brettlyne/dixma"}],content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsxs)("p",{children:["My team at Intuit does hackathons every quarter. For the August 2020 hackathon, I suggested we recreate a board game that we could play together online. We chose the card game"," ",Object(a.jsx)("a",{href:"https://boardgamegeek.com/boardgame/39856/dixit",children:"Dixit"})," and decided to make it a"," ",Object(a.jsx)("a",{href:"https://www.figma.com/plugin-docs/intro/",children:"Figma plugin"})," ",'since Figma allows for collaborative interaction. The name "Dixma" came from the combination of Dixit + Figma.']}),Object(a.jsx)("img",{src:"".concat(b,"1.png"),alt:"Dixma cover art"}),Object(a.jsx)("p",{children:"The game starts with players choosing a color to add their name to the list of players. One or more players can run the Dixma plugin within Figma to start the game and control the gameplay."}),Object(a.jsx)("img",{src:"".concat(b,"2.png"),alt:"Players adding names to list"}),Object(a.jsx)("p",{children:"When the first round starts, each player gets a page created within the Figma document. This page holds the six cards they have in their hand each round. This is also where they can submit cards and voting tokens to the main game board. Players are on the honor system to not look at other player's pages."}),Object(a.jsx)("img",{src:"".concat(b,"3.png"),alt:"Player's hand"}),Object(a.jsx)("p",{children:'Each round, one player is the storyteller and gives a short clue to describe a card in their deck. All other players submit a card that they think best matches the clue. Once everyone has submitted, the player controlling the plugin reveals the cards in the "Card Play Area".'}),Object(a.jsx)("img",{src:"".concat(b,"4.png"),alt:"Cards moved to 'Card Play Area'"}),Object(a.jsx)("p",{children:"Next, players look at the cards played and vote for the card they think fits with the clue given. Players must determine their scores and move their tokens on the game board. The next round begins and rounds continue until someone reaches 30 points."}),Object(a.jsx)("img",{src:"".concat(b,"5.png"),alt:"Players voting"}),Object(a.jsx)("p",{children:"This plugin was written in Typescript and was primarily developed over two days. I had never used Typescript or created a Figma plugin before so it was a rapid learning process! If I were to continue working on this, I would consider adding automatic scoring. This was a fun project to work on and my team enjoys playing Dixma together online."})]})},w=u("IEPShell"),f={title:"Intuit Expert Portal",subTitle:"Proof of concept for design updates",coverImageSrc:"".concat(w,"/1.png"),coverPosition:"top left",passwordRequired:!0,overview:{problem:"The portal Intuit customer service agents use needed updates to better align with the Intuit Design System and make usability improvements.",goal:"Create a React prototype with these design updates to be passed off to production engineers.",role:"I was the sole developer for this project and partnered with a product design team to create this prototype.",dates:"November - December 2020",technologies:"React, Styled Components"},links:[],content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"For this project, I worked with the Intuit Export Portal design team. This portal is used by Intuit customer service agents (a.k.a. Intuit Experts) to assist customers. In this portal Experts can see customer data while on a call and also manage personal work information such as their schedule and notes."}),Object(a.jsx)("p",{children:'The focus for this prototype was updating the "shell" of the product - the left, top, and right navigation elements. The design team wanted to refresh the components and visual design to align with Intuit Design Systems. They also rearranged some of the navigation content based on feedback from their users. The inner content was not finalized for this phase of prototyping so a responsive column layout was used as a placeholder.'}),Object(a.jsx)("img",{src:"".concat(w,"1.png"),alt:"The Intuit Export Portal Shell"}),Object(a.jsx)("p",{children:'The functionality required for this prototype was to be able to click through the left navigation items and open and close the right drawer. The "Engagements" screen needed to show a header and tabs with client information. Navigation elements also had to behave responsively on smaller screens.'}),Object(a.jsx)("video",{className:"withCaption",controls:!0,muted:!0,preload:"none",children:Object(a.jsx)("source",{src:"".concat(w,"Demo.mp4"),type:"video/mp4"})}),Object(a.jsx)("p",{className:"body2 caption",children:"This video shows the entire flow of the prototype."}),Object(a.jsx)("p",{children:"The most challenging development aspect of this project was the responsive design of the top navigation. This header included dropdowns, links, and other information that needed to be accessible on smaller screens. These navigation items needed to collapse into an overflow menu."}),Object(a.jsx)("img",{className:"withCaption",src:"".concat(w,"2.png"),alt:"Milestone dropdown when header is not in overflow."}),Object(a.jsx)("p",{className:"body2 caption",children:"Opening the milestone dropdown when the header is not in an overflow state."}),Object(a.jsx)("img",{className:"withCaption",src:"".concat(w,"3.png"),alt:"Milestone dropdown when header is overflowing."}),Object(a.jsx)("p",{className:"body2 caption",children:"Accessing the milestone dropdown in an overflow state."}),Object(a.jsx)("p",{children:"Another responsive aspect of this screen was the overflow behavior for tabs. Tabs needed an arrow to show that there were more tabs hidden. When clicked, this arrow needed to scroll the tabs by a set pixel value."}),Object(a.jsx)("img",{src:"".concat(w,"4.png"),alt:"Tabs in an overflow state"}),Object(a.jsx)("p",{children:"After this prototype had been finalized with the design team, I handed off the prototype and the code to the development team. They were able to reuse my work in their production code, which sped up the process to implement these changes."})]})},y=u("Pyro"),x={title:"Pyro",subTitle:"Prototyping tool for Intuit designers",coverImageSrc:"".concat(y,"/1.png"),coverPosition:"center",passwordRequired:!0,overview:{problem:"Intuit designers need a way to quickly create high-fidelity prototypes with interactive components and real user data.",goal:"Develop an intuitive drag-and-drop interface that leverages Intuit Design System components and supports custom data and logic.",role:"I worked on a small team of five Design Technologists. I wore many hats including developing the product, designing new features, leading user testing sessions, and prioritizing our Jira board.",dates:"February 2020 - April 2022",technologies:"React, Firebase"},links:[],content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"Pyro is a custom prototyping tool built by Intuit Design Technologists for Intuit designers. It allows anyone to create prototypes using Intuit Design System components, user data, and logic without writing any code. I have been working on this project since February 2020 improving the editor and creating features that cater to QuickBooks design needs."}),Object(a.jsx)("video",{className:"withCaption",controls:!0,preload:"none",children:Object(a.jsx)("source",{src:"".concat(y,"Demo.mp4"),type:"video/mp4"})}),Object(a.jsx)("p",{className:"body2 caption",children:"This is the demo video for the initial release of Pyro. Video editing credits go to my awesome colleagues Heather & Lynda."}),Object(a.jsxs)("p",{children:["Pyro leverages ",Object(a.jsx)("a",{href:"https://craft.js.org/",children:"Craft.js"})," with React to create drag and drop functionality in the editor. The prototype data syncs to a ",Object(a.jsx)("a",{href:"https://firebase.google.com/",children:"Firebase"})," backend. Users can grab components from the left-side panel and drag them into the editor. When a component is selected, you can edit its properties in the right-side panel. These components are either custom components built for Pyro or they are imported from Intuit's design system."]}),Object(a.jsx)("img",{src:"".concat(y,"2.png"),alt:"Pyro editor"}),Object(a.jsx)("p",{children:'In addition to changing the style of components, you can also set an "on click" action for the component or conditionally show or hide it. This allows users to build complex prototypes with many pages and branching flows. This feature is particularly important for TurboTax designers who often need to create flows with a series of questions.'}),Object(a.jsx)("img",{src:"".concat(y,"3.png"),alt:"Close up of component editing"}),Object(a.jsx)("p",{children:"Many QuickBooks designers need to incorporate real user data into customer testing sessions to help the customer feel like the prototype is real. Customer data often comes in the form of a list of transactions, and typically a Design Technologist would build a custom React prototype to display this data. We added an editable table component to Pyro that allows designers to upload user data as a CSV, saving us all time!"}),Object(a.jsx)("img",{src:"".concat(y,"4.png"),alt:"Table component"}),Object(a.jsx)("p",{children:"Once Pyro was close to being ready for release, a teammate and I conducted ten user testing sessions with Intuit designers. We wanted to learn if there were any major usability issues blocking the release and get feedback on what features should be added to Pyro. The reaction from our participants was very positive and they were excited to use Pyro"}),Object(a.jsxs)("p",{children:["The main issues that came out of testing were:",Object(a.jsx)("br",{}),"1. The onboarding flow was too long and there was more information than users could process.",Object(a.jsx)("br",{}),"2. Users expected to be able to undo and redo changes. (At the time of testing, this feature was still in development)",Object(a.jsx)("br",{}),"3. Adding a new page to the prototype was not intuitive."]}),Object(a.jsx)("img",{src:"".concat(y,"5.png"),alt:"Testing results"}),Object(a.jsx)("p",{children:"The majority of the issues from user testing were addressed and Pyro released to Intuit designers in November 2020."})]})},v=u("Toolkit"),O={title:"QB Designer Toolkit",subTitle:"Figma plugin for Intuit designers",coverImageSrc:"".concat(v,"/Cover.png"),coverPosition:"center",passwordRequired:!0,overview:{problem:"How can we leverage Figma plugins to improve Intuit designers' workflows?",goal:"Create a Figma plugin that empowers designers to easily add motion, content, and theming to their work.",role:"I was the lead for this tool. I maintained the design and code of this plugin and promoted it to our users.",dates:"February 2021 - April 2022",technologies:"Figma Plugin API, Typescript, React"},content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("h2",{class:"sectionTitle",children:"Version 1"}),Object(a.jsxs)("p",{children:["During the fall of 2020, Intuit designers made the switch to using"," ",Object(a.jsx)("a",{href:"https://www.figma.com/",children:"Figma"})," as their primary design tool. Figma supports adding"," ",Object(a.jsx)("a",{href:"https://www.figma.com/community/plugins?tab=plugins",children:"plugins"}),", which are apps you can install to add functionality and improve your workflow. After experimenting with Figma plugins in a hackathon, I was eager to develop the first Figma plugin for Intuit designers."]}),Object(a.jsx)("p",{children:"A design hurdle I wanted to tackle was supporting theming, particularly dark mode. Dark mode has been a work in progress for Intuit design for some time and is currently an experimental beta setting for QuickBooks. Dark mode is a priority because it is a feature our users expect, and also has accessibility benefits such as better contrast and reduced eye strain. As this feature becomes more used, we need to make sure that designs will work for both light and dark modes."}),Object(a.jsx)("img",{src:"".concat(v,"1.gif"),alt:"Dark mode demo"}),Object(a.jsx)("p",{children:"I created a simple UI that would allow users to toggle both layers and pages between light and dark mode. I also included a color inspector that would display the fill and border colors for a selected layer and show their light and dark mode pairings."}),Object(a.jsx)("img",{src:"".concat(v,"2.png"),className:"withCaption",alt:"Plugin interface"}),Object(a.jsx)("p",{className:"body2 caption",children:"Inspecting a dark mode design to see the color pairings."}),Object(a.jsxs)("p",{children:["Once I had a solid design, I moved on to developing the functionality using ",Object(a.jsx)("a",{href:"https://www.typescriptlang.org/",children:"Typescript"})," and"," ",Object(a.jsx)("a",{href:"https://sass-lang.com/",children:"Sass"}),". The plugin analyzes a layer's fill and border colors, finding the appropriate contextual color pairing, and then changing the layer's colors to the new theme.This automatic process is completed in a matter of seconds, which saves designers hours of work in manually changing colors."]}),Object(a.jsx)("video",{className:"withCaption",controls:!0,preload:"none",children:Object(a.jsx)("source",{src:"".concat(v,"Demo.mp4"),type:"video/mp4"})}),Object(a.jsx)("p",{className:"body2 caption",children:"This quick demo of Dark Mode that appeared within a QB Designer Toolkit instructional video I created."}),Object(a.jsx)("p",{children:"Design Technologists on my team also created two other plugins that focus on motion and content. We combined all three plugins to make it easy for designers to access all of our tools at once. I led the merge effort and refactored our code to use the same visual style and coding standards."}),Object(a.jsx)("p",{children:"Version 1 of this plugin was released to the QuickBooks design community in April 2021. The plugin now has now been installed by 238 users, roughly 2/3 of our total designers."}),Object(a.jsx)("hr",{className:"contentDivider"}),Object(a.jsx)("h2",{class:"sectionTitle",children:"Version 2"}),Object(a.jsx)("p",{children:"After the successful launch of the plugin, I paused development for several months to collect analytics and user feedback. In December 2021, I created a plan to add more functionality to the plugin. I wanted to target three key areas:"}),Object(a.jsx)("h4",{children:"Opportunity #1: Refresh the plugin design"}),Object(a.jsx)("p",{children:"The first version of this plugin had features that were designed by separate teams and lacked a common visual language. The design of the plugin did not support multiple modes of navigation. It was likely that we would need the flexibility to develop more complex UIs in the future."}),Object(a.jsx)("h4",{children:"Opportunity #2: Contextualize analytics data"}),Object(a.jsx)("p",{children:"Adding analytics to a Figma plugin can be a bit of a challenge. Since it is contained within an iFrame, there is no access to certain information most analytics tools need. For the first launch, I developed a simple click counting system for the buttons in the plugin. While this did help me understand which buttons were being used the most, it lacked the contextual data. Which user clicked, and in what file, and at what time? I needed this information to make data-driven decisions about the future of the plugin."}),Object(a.jsx)("h4",{children:"Opportunity #3: Add a requested feature"}),Object(a.jsx)("p",{children:"Currently, the most used feature within the plugin is the content generator. My team did user research to get feedback on this feature and found that a common ask from designers was a way to generate numbers."}),Object(a.jsx)("h4",{children:"Tackling opportunities"}),Object(a.jsxs)("p",{children:["I started by redesigning the plugin to create a common visual language. I chose to use"," ",Object(a.jsx)("a",{href:"https://www.figma.com/community/file/928108847914589057",children:"UI2, Figma's Design System"})," ","as the basis for my design. Using Figma's components and styles helps the plugin blend into Figma's UI and seem like a more natural extension of its capabilities. I also changed the plugin navigation system to include a flyout menu. Moving page navigation into the flyout menu gave each feature room for its own navigational elements."]}),Object(a.jsx)("img",{src:"".concat(v,"/Redesign.png"),alt:"Redesign before and after",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Selection of redesigned screens before (left) and after (right)"}),Object(a.jsx)("img",{src:"".concat(v,"/Cover.png"),alt:"Cover art",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Redesigned cover art for installation page"}),Object(a.jsxs)("p",{children:["My next step was to add analytics. I chose to use"," ",Object(a.jsx)("a",{href:"https://mixpanel.com/",children:"Mixpanel"})," because of its powerful capabilities and compatibility with Figma plugins. Now, when a user clicks a button I know their name, the file they are using, and their overall activity. I can track monthly active users, view a list of Figma files the plugin is being used in, and see which buttons are clicked the most. This will help me know which features of the plugin are most valuable and should be invested in. I now know who the top users of the plugin are and can ask them for feedback."]}),Object(a.jsx)("img",{src:"".concat(v,"/Mixpanel.png"),alt:"Mixpanel Analytics Dashboard",className:"withCaption"}),Object(a.jsxs)("p",{className:"body2 caption",children:[Object(a.jsx)("a",{href:"https://mixpanel.com/public/7veU4Lv7JycMp3Ene9z4hu",children:"Mixpanel Analytics dashboard"})," ","with three weeks of data"]}),Object(a.jsx)("p",{children:"Next, I worked on the random number generation feature. QuickBooks designers often create data tables with transactional information such as dates, percentages, and currency values so I wanted to include all of these options in this feature. This feature has the flexibility to add one number or a range of numbers, with options to sort the range. This will reduce the work a designer has to do filling out a table from minutes to seconds."}),Object(a.jsx)("img",{src:"".concat(v,"/Number.png"),alt:"Random number generator",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"The UI allows users to customize the format of numbers, currencies, and dates"}),Object(a.jsx)("p",{children:"Version 2 was released in January 2022, and the plugin continues to be widely used amongst Intuit designers."})]})},k=u("VideoGameOlympics"),I={title:"Video Game Olympics",subTitle:"Personal project using Google Sheets API",coverImageSrc:"".concat(k,"/1.png"),coverPosition:"top center",passwordRequired:!1,overview:{problem:"How can we display data from a video game tournament in real time?",goal:"Create a website that pulls live data from a Google spreadsheet to display a leaderboard and challenges list.",role:"I designed and developed this website as a personal project.",dates:"September - October 2021",technologies:"React, Google Spreadsheet API"},links:[{title:"Video Game Olympics website",url:"https://alaynatruttmann.com/video-game-olympics/"},{title:"GitHub repository",url:"https://github.com/atruttmann/video-game-olympics"}],content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"I was inspired to work on this project by my partner, who hosted a video game tournament where his friends would complete challenges for points. While the event was happening, he wanted to show players a countdown timer, a leaderboard, and a list of challenges. In the background, my partner would review challenge submissions and enter player scores in a spreadsheet. I used his ideas to build a website where all this information could be displayed."}),Object(a.jsx)("p",{children:"I started by making a list of the requirements for the product and doing a simple sketch to plan the layout. I chose two monospaced fonts to evoke a retro video game feel. I added emojis to the leaderboard to denote the top players."}),Object(a.jsx)("img",{src:"".concat(k,"1.png"),alt:"Leaderboard"}),Object(a.jsxs)("p",{children:["I built this project using React and SCSS. I used"," ",Object(a.jsx)("a",{href:"https://github.com/theoephraim/node-google-spreadsheet",children:"google-spreadsheet"}),", a Google Sheets API wrapper for JavaScript, to pull the data from the spreadsheet of scores. Since this data needed to update as the spreadsheet was edited, I refreshed the data every five seconds."]}),Object(a.jsx)("p",{children:"Players earned points by doing challenges. The relevant data they needed to know was the challenge description and how many points were up for grabs. A maximum of three players could score for each challenge, so challenges that were no longer available were grayed out."}),Object(a.jsx)("img",{src:"".concat(k,"2.png"),alt:"Challenges"}),Object(a.jsx)("p",{children:"This website was built with a responsive design. I expected most players to view the site on their laptops, but they had the option of viewing it on their phone (or any device) if they preferred. Any overflowing content in the tables can be accessed by scrolling horizontally."}),Object(a.jsxs)("div",{className:"twoImg",children:[Object(a.jsx)("img",{src:"".concat(k,"3.png"),alt:"Viewed on phone"}),Object(a.jsx)("img",{src:"".concat(k,"4.png"),alt:"Viewed on tablet"})]}),Object(a.jsx)("p",{children:"At the end of the tournament, the countdown was replaced with a message declaring the winner. The event went well and the players enjoyed using the website."}),Object(a.jsx)("img",{src:"".concat(k,"5.png"),alt:"Winner"}),Object(a.jsx)("p",{children:"This was a fun project, and a great way to learn to use Google Sheets as a backend. If I were to continue working on this, I would get more user feedback to understand if the challenges table was meeting the needs of the players. It could be sorted differently, or maxed out challenges could be hidden. It would also be cool to explore a player submission functionality so some of the behind the scenes work could be automated."})]})},T=u("Flow"),N={title:"Flow",subTitle:"Prototyping tool for web & TV",coverImageSrc:"".concat(T,"/1.png"),coverPosition:"center",passwordRequired:!0,overview:{problem:"Roku designers need a way to easily view their prototypes on TVs for user testing.",goal:"Create an easy to use web platform that exports prototypes to a Roku TV channel.",role:"I am the sole designer and full stack engineer on this project.",dates:"April 2022 - present",technologies:"React, Node.js, AWS Dynamo DB, AWS S3"},content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"Prototyping is at the heart of the Roku UX Engineering team's focus, but we don't always have time to make every prototype designers request. Creating an internal prototyping tool allows designers to self-serve simple prototypes, freeing up UX Engineers to code complex experiences. Flow empowers designers to create and view their prototypes on a TV and share them with in-person or remote users for testing."}),Object(a.jsx)("p",{children:"The first step I took to make Flow was to plan out the user experience. The experience is split between creating a prototype on the web and viewing a prototype on a Roku channel."}),Object(a.jsx)("img",{src:"".concat(T,"2.png"),alt:"User experience diagram"}),Object(a.jsxs)("p",{children:["I started designing the experience using Roku's web design system components. I iterated on the design using feedback gathered from my team. The primary web views are:",Object(a.jsxs)("ol",{children:[Object(a.jsx)("li",{children:"Login"}),Object(a.jsx)("li",{children:"View all prototypes"}),Object(a.jsx)("li",{children:"Edit prototype"}),Object(a.jsx)("li",{children:"Preview prototype"})]})]}),Object(a.jsx)("img",{className:"withCaption",src:"".concat(T,"3.png"),alt:"Flow home page"}),Object(a.jsx)("p",{className:"body2 caption",children:"View all of your prototypes on the Flow home page"}),Object(a.jsxs)("p",{children:["I started developing the website first. I used React to build the UI and a Node.js to send data to Dynamo DB and store images in a S3 bucket. I leveraged the open source"," ",Object(a.jsx)("a",{href:"https://reactflow.dev/",children:"React Flow"})," library as the editor for my interactive diagrams."]}),Object(a.jsx)("img",{className:"withCaption",src:"".concat(T,"4.png"),alt:"Flow editor"}),Object(a.jsx)("p",{className:"body2 caption",children:"Editing a prototype"}),Object(a.jsx)("p",{children:"I built a web preview so users can try out the prototype on the web and fix issues before viewing on the TV."}),Object(a.jsx)("img",{className:"withCaption",src:"".concat(T,"5.png"),alt:"Prototype preview"}),Object(a.jsx)("p",{className:"body2 caption",children:"Previewing a prototype"}),Object(a.jsxs)("p",{children:["The next phase of my development work was creating the Roku channel. I used an internal technology that functions like to React but works on TV channels. It is similar to the externally available"," ",Object(a.jsx)("a",{href:"https://developer.roku.com/develop",children:"Roku SDK"}),"."]}),Object(a.jsx)("img",{className:"withCaption",src:"".concat(T,"6.png"),alt:"Roku channel home view"}),Object(a.jsx)("p",{className:"body2 caption",children:"Entering a prototype code on the installed channel"}),Object(a.jsx)("p",{children:"Flow 1.0 was released in August 2022. I created a demo video to introduce users to Flow."}),Object(a.jsx)("video",{className:"withCaption",controls:!0,preload:"none",poster:"".concat(T,"1.png"),children:Object(a.jsx)("source",{src:"".concat(T,"Demo.mp4"),type:"video/mp4"})}),Object(a.jsx)("p",{children:"As more designers have used the tool I have added new features based on their use cases. These features include fade transitions, long-pressing remote buttons, allowing videos, screen reader support, and more. Eventually, I want to make a Figma plugin that can export images into Flow to accelerate the design process."})]})},P=u("Puffin"),F={title:"Puffin Bulk Generator",subTitle:"Figma plugin for Roku designers",coverImageSrc:"".concat(P,"/1.png"),coverPosition:"center",passwordRequired:!0,overview:{problem:"Bulk generating assets is an arduous task for designers, and handoff to engineering is a manual, non-standardized process.",goal:"Take the tedious work out of bulk generating assets. Automate work that is currently done with copy/paste, while letting designers have control over tweaking the details. Make it easy to hand off assets to engineers.",role:"I am the sole designer and developer on this project.",dates:"April 2023 - present",technologies:"Figma Plugin API, Typescript, React"},content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"A common problem in the Roku design community is that generating tile images is a long process involving a lot of copying and pasting. Tile assets can be a list of TV or movie categories, sports games, local news, and more. Designers need to verify text translations for each tile, which can involve generating 100+ tiles at a time. Tile images must be compressed and follow a naming convention before handing off to engineers."}),Object(a.jsx)("img",{src:"".concat(P,"2.png"),alt:"Example tiles",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Example of tiles Roku designers generate"}),Object(a.jsx)("p",{children:"My first thought when hearing about these issues was that a Figma plugin could be a perfect fit to automate many of these tasks. The advantage to using Figma is that designers can keep their work in one tool, and have the functionality they need to customize assets."}),Object(a.jsxs)("p",{children:["When starting my design process I chose to use"," ",Object(a.jsx)("a",{href:"https://www.figma.com/community/file/928108847914589057",children:"UI2, Figma's Design System"}),". I learned from previous experience building plugins that they felt more integrated with Figma when they used the same design system. I chose to swap Figma's traditional blue accent with an electric purple to give it a Roku-themed flair."]}),Object(a.jsx)("p",{children:'The first challenge was understanding the process designers go through to customize each tile. I wanted to make bulk generation a "one-click" experience but found it didn\'t work with the designer\'s workflows. Each tile has to be customized - the color changed or an icon repositioned. It didn\'t make sense to generate 100 tiles all at once if the designer would have to go back and tweak each tile. I shifted my mindset to thinking of it as "applying a transformation" to tiles in a multi-step process.'}),Object(a.jsx)("img",{src:"".concat(P,"3.png"),alt:"User flow",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Planning the tile generation flow"}),Object(a.jsx)("p",{children:"The next step was to design the export experience. My design stakeholders requested that I limit the export customizations to simplify the process. With that direction, I added settings for image resolutions, formats, and folder naming. Puffin takes care of standardizing the naming of each layer behind the scenes."}),Object(a.jsx)("p",{children:"Another request from the stakeholders was to add a shortcut for creating Figma components. This feature makes it easy to generate a blank component with aspect ratio variants since Roku tiles all use the same set of aspect ratios."}),Object(a.jsx)("img",{src:"".concat(P,"4.png"),alt:"Puffin screens",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Finalized designs"}),Object(a.jsxs)("p",{children:["My previous experience building Figma plugins accelerated the development process. I used a handy"," ",Object(a.jsx)("a",{href:"https://github.com/nirsky/figma-plugin-react-template",children:"React Figma plugin template"})," ","to start the project. I leveraged"," ",Object(a.jsx)("a",{href:"https://github.com/alexandrtovmach/react-figma-plugin-ds",children:"react-figma-plugin-ds"})," ","for design system components."," ",Object(a.jsx)("a",{href:"https://github.com/Donaldcwl/browser-image-compression",children:"browser-image-compression"})," ","and ",Object(a.jsx)("a",{href:"https://github.com/Stuk/jszip",children:"jszip"})," helped me export assets."]}),Object(a.jsx)("p",{children:"Finally, I was ready to share the plugin with the Roku design community. I created a quick overview video to show what the plugin could do."}),Object(a.jsx)("video",{controls:!0,preload:"none",poster:"".concat(P,"1.png"),children:Object(a.jsx)("source",{src:"".concat(P,"Demo.mp4"),type:"video/mp4"})}),Object(a.jsxs)("p",{children:["Puffin 1.0 launched in August 2023. Now, I am gathering user feedback to determine changes to make in the next version. I would like to explore stronger image compression techniques such as"," ",Object(a.jsx)("a",{href:"https://en.wikipedia.org/wiki/Quantization_(image_processing)",children:"image quantization"}),"."]})]})},S=u("Oso"),A={title:"Remote backlight interface",subTitle:"Controlling TV remote hardware",coverImageSrc:"".concat(S,"/1.png"),coverPosition:"center top",passwordRequired:!0,overview:{problem:"Roku designers needed to control the LED backlight color and behaviors of an experimental TV remote for user testing.",goal:"Develop a web interface that allows designers to control TV remote settings during experimentation and user testing.",role:"I was the sole designer and software developer on this project. I partnered with a hardware engineer to send signals between the web interface and the remote.",dates:"September - October 2022",technologies:"React, Web Serial API, Arduino"},content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("img",{src:"".concat(S,"2.png"),alt:"Backlit remotes",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Backlit remote prototypes"}),Object(a.jsx)("p",{children:"The next generation of Roku remotes will be backlit, meaning that when a user interacts with the remote it will light up. This will make the buttons easier to see, especially in dark conditions. Roku designers needed to determine the best LED color for the remote. They also needed to find the best activation method for the light. The options were touch (holding remote), proximity (hand is near the remote), or accelerometer (moving remote). Designers also needed to be able to configure how long the light would stay on, and how long the light should fade out."}),Object(a.jsx)("p",{children:"The best way to make decisions about remote backlighting was through user testing. The designers requested to customize remote configurations, and have shortcuts to show different configurations during testing. This is where I came in to design and develop an interface the designers could use."}),Object(a.jsxs)("p",{children:["A hardware engineer on my team had built several remotes with an"," ",Object(a.jsx)("a",{href:"https://www.arduino.cc/",children:"Arduino"})," that could change the remote's settings. It was possible to have a website communicate with the remote's Arduino using the"," ",Object(a.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API",children:"Web Serial API"}),". The challenge was that I had never used the Web Serial API and I had only a few weeks to design and build this project."]}),Object(a.jsxs)("p",{children:["I got to work right away. I leveraged several of Roku's web design system components to build the interface faster. There were several custom components I needed to build. I created a color picker that could handle both regular RGB colors as well as"," ",Object(a.jsx)("a",{href:"https://giggster.com/guide/color-temperature-chart/",children:"color temperatures"}),". Most of the remote button lights would be a shade of warm white. Certain buttons that launched channels would use a brand color, such as red for Netflix.."]}),Object(a.jsx)("img",{src:"".concat(S,"3.png"),alt:"Web interface",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Settings used to control the remote"}),Object(a.jsx)("p",{children:"In addition to the main control dashboard I gave designers the ability to create preset configurations. Presets were important because the user testing moderator needed to be able to show users different variations during the session. I set it up so they could apply many settings at once with the click of a button."}),Object(a.jsx)("img",{src:"".concat(S,"4.png"),alt:"Preset creation",className:"withCaption"}),Object(a.jsx)("p",{className:"body2 caption",children:"Creating a preset configuration"}),Object(a.jsx)("p",{children:"User testing sessions showed that the reaction to backlit remotes was positive. Preference for the light activation method (touch, proximity, accelerometer) was mixed."}),Object(a.jsx)("p",{children:"I learned a lot about communicating with Arduinos in this project. If I had more time to work on it, I would have iterated on the design and asked for more feedback. The interface was quite complicated to use due to the number of settings and customization needed, but could have room for improvement on simplicity. However, I would call delivering a complicated prototype on a tight timeline a win."})]})},C=u("UXE"),R=[N,F,{title:"Roku UXE Team Site",subTitle:"Showcasing tools & prototypes",coverImageSrc:"".concat(C,"/1.png"),coverPosition:"center top",passwordRequired:!1,overview:{problem:"The Roku UX Engineering team needed a place to share their tools, prototypes, and roadmap.",goal:"Create a beautiful website that informs other designers about UX Engineering.",role:"I am the sole designer and full stack engineer on this project.",dates:"September 2022 - present",technologies:"React, Node.js, AWS Dynamo DB, AWS S3, Jira API"},content:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"The Roku UX Engineering team needed a way to increase our visibility to the rest of the design organization. A basic Confluence page would not do! This website needed to include our internal tools, prototypes, team roadmap, and FAQs about working with our team."}),Object(a.jsx)("p",{children:"When I started designing this project, I knew I wanted to use striking colors and lots of Roku purple. I was particularly inspired by an ad campaign Roku had done recently. I loved the rounded shapes and gradients and wanted to incorporate them in my designs. My goal was for the website to be attractive to designers and show off our UX Engineering front-end skills."}),Object(a.jsx)("img",{src:"".concat(C,"2.jpg"),alt:"Roku billboard ad"}),Object(a.jsx)("p",{children:"The first section of the site shows a list of our internal tools. Each tool has an accompanying video or image with links to its site. The tab arrangement on the left allows you to browse the details for each tool."}),Object(a.jsx)("img",{src:"".concat(C,"1.png"),alt:"Internal tools"}),Object(a.jsx)("p",{children:"The next section shows the prototypes the team has worked on. The list style mimics the experience of browsing content on a Roku device. You can search for prototypes, which is helpful because there are more than 60 prototypes to view."}),Object(a.jsx)("img",{src:"".concat(C,"3.png"),alt:"Viewing prototypes"}),Object(a.jsx)("p",{children:"Each prototype can open in a modal. There you can see more project details and interact with prototype in an iframe.me."}),Object(a.jsx)("img",{src:"".concat(C,"4.png"),alt:"Prototypes detail view"}),Object(a.jsx)("p",{children:"I also added a hidden form where UX Engineers could add more prototypes to the list. The data is saved to AWS Dynamo DB and images are uploaded to AWS S3."}),Object(a.jsx)("img",{src:"".concat(C,"5.png"),alt:"Add prototype"}),Object(a.jsxs)("p",{children:["The roadmap section displayed a calendar view of the projects the team is working on. This view syncs with Jira using the"," ",Object(a.jsx)("a",{href:"https://developer.atlassian.com/server/jira/platform/rest-apis/",children:"Jira API"}),", so roadmap updates are automatic."]}),Object(a.jsx)("img",{src:"".concat(C,"6.png"),alt:"Project roadmap"}),Object(a.jsx)("p",{children:"The FAQ section lets other designers know how best to work with our team. It includes two quizzes to assess whether a coded prototype is necessary and approximately how long a prototype will take to develop."}),Object(a.jsx)("img",{src:"".concat(C,"7.png"),alt:"FAQ section"}),Object(a.jsx)("img",{src:"".concat(C,"8.png"),alt:"Prototype quiz"}),Object(a.jsx)("p",{children:"This was a fun design exercise for me! I plan to continue iterating on the content of the website as more functionality is needed."})]})},A,O,x,f,I,j],D=o(30),E=(o(22),function(e){var t=e.authenticate,o=void 0===t?function(){}:t,n=Object(s.useState)(""),i=Object(c.a)(n,2),r=i[0],l=i[1],d=Object(s.useState)(!1),h=Object(c.a)(d,2),m=h[0],g=h[1];return Object(a.jsxs)("div",{className:"passwordContainer",children:[Object(a.jsx)(p.f,{className:"passwordIcon"}),Object(a.jsxs)("p",{className:"body2",children:["Sorry, the information in this project is confidential and requires a password. Please email"," ",Object(a.jsx)("span",{className:"email",children:"amtruttmann@gmail.com"})," for access."]}),Object(a.jsxs)("div",{className:"formContainer",children:[Object(a.jsxs)("form",{className:"passwordForm",onSubmit:function(e){g(!o(r)),e.preventDefault()},children:[Object(a.jsx)("input",{type:"text",autoComplete:"username",style:{display:"none"}}),Object(a.jsx)("input",{id:"passwordInput",value:r,type:"password",placeholder:"Password","aria-label":"Password",className:"passwordInput",onChange:function(e){return l(e.target.value)},name:"password",autoComplete:"current-password"}),Object(a.jsx)("input",{type:"submit",value:"Access",className:"passwordButton"})]}),Object(a.jsxs)("div",{className:"passwordError",style:m?{visibility:"visible"}:{visibility:"hidden"},children:[Object(a.jsx)(p.b,{className:"passwordWarning"}),Object(a.jsx)("p",{className:"body3",children:"Whoops, looks like this password is invalid"})]})]})]})}),W=(o(23),function(e){var t=e.project,o=e.open,n=e.closeModal,i=e.authenticated,r=e.authenticate,c=void 0===r?function(){}:r;Object(s.useEffect)((function(){i&&l()}),[i]);var l=function(){var e=document.getElementsByTagName("video");Array.from(e).forEach((function(e){e.preload="auto",e.style.opacity="1"}))};return Object(a.jsx)(D.a,{in:o,timeout:400,unmountOnExit:!0,onEntered:function(){l();var e=document.getElementById("passwordInput");e&&e.focus()},children:Object(a.jsx)("div",{className:"modalContainer",children:Object(a.jsxs)("div",{className:"projectContent",children:[Object(a.jsx)("button",{className:"closeButton",onClick:n,"aria-label":"Close modal",children:Object(a.jsx)(p.i,{className:"closeIcon"})}),Object(a.jsxs)("div",{className:"projectHeader",children:[Object(a.jsx)("h1",{children:t.title}),Object(a.jsx)("h3",{children:t.subTitle})]}),t.passwordRequired&&!i?Object(a.jsx)(E,{authenticate:c}):Object(a.jsxs)(a.Fragment,{children:[Object(a.jsxs)("div",{className:"overview",children:[Object(a.jsx)("h2",{className:"sectionTitle",children:"Overview"}),Object.keys(t.overview).map((function(e){return Object(a.jsxs)("p",{children:[Object(a.jsx)("b",{children:"".concat(e,": ")}),t.overview[e]]},e)})),t.links&&t.links.length>=1&&Object(a.jsxs)("p",{children:[Object(a.jsx)("b",{children:"Links: "}),t.links.map((function(e,o){return Object(a.jsxs)("span",{children:[Object(a.jsx)("a",{href:e.url,children:e.title},e.title),o<t.links.length-1&&" | "]},e.title)}))]})]}),Object(a.jsx)("hr",{className:"contentDivider"}),t.content]})]})})})}),q=(o(26),o(27),"helloworld");var M=function(){var e=Object(s.useState)(!1),t=Object(c.a)(e,2),o=t[0],n=t[1],i=Object(s.useState)(!1),r=Object(c.a)(i,2),u=r[0],b=r[1],j=Object(s.useState)(!1),w=Object(c.a)(j,2),f=w[0],y=w[1],x=Object(s.useState)(R[0]),v=Object(c.a)(x,2),O=v[0],k=v[1];return Object(s.useEffect)((function(){var e,t=null!==(e=localStorage.getItem("theme"))&&void 0!==e?e:null;t?b("dark"===t):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches&&b(!0)}),[]),Object(s.useEffect)((function(){var e=u?"dark":"light";localStorage.setItem("theme",e),document.documentElement.style.setProperty("color-scheme",e),document.documentElement.setAttribute("data-theme",e)}),[u]),Object(a.jsxs)("div",{className:"app ".concat(u?"theme-dark":"theme-light"),children:[Object(a.jsxs)("div",{className:"appContainer",children:[Object(a.jsx)("button",{className:"themeToggle",onClick:function(){return b(!u)},"aria-label":"Change theme",children:u?Object(a.jsx)(p.h,{}):Object(a.jsx)(p.g,{})}),Object(a.jsxs)(l.a,{className:"projectsGrid",children:[Object(a.jsx)(d.a,{children:Object(a.jsx)(m,{})}),Object(a.jsx)(d.a,{xs:1,sm:1,md:2,lg:2,xl:3,className:"projectsRow",children:R.map((function(e){return Object(a.jsx)(h.a,{className:"projectColumn",children:Object(a.jsx)(g,{project:e,setSelectedProject:k,setModalOpen:function(){return y(!0)},authenticated:o,authenticate:function(e){var t=e===q;return n(t),t}})},e.title)}))})]}),Object(a.jsx)("div",{className:"footer",children:Object(a.jsxs)("p",{className:"body2",children:["This website was designed and built by me! Check out the code on"," ",Object(a.jsx)("a",{href:"https://github.com/atruttmann/atruttmann.github.io",children:"GitHub"}),"."]})})]}),Object(a.jsx)(W,{project:O,open:f,closeModal:function(){return y(!1)},authenticated:o,authenticate:function(e){var t=e===q;return n(t),t}})]})};r.a.render(Object(a.jsx)(n.a.StrictMode,{children:Object(a.jsx)(M,{})}),document.getElementById("root"))}},[[28,1,2]]]);
//# sourceMappingURL=main.e0221f60.chunk.js.map